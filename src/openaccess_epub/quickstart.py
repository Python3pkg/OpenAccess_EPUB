# -*- coding: utf-8 -*-
"""
openaccess_epub.quickstart

Used for configuring an installation of OpenAccess_EPUB
"""

from openaccess_epub.utils import cache_location
import os
import sys

LOCAL_DIR = os.getcwd()
CACHE_LOCATION = cache_location()

CONFIG_TEXT='''/
# -*- coding: utf-8 -*-
#
# OpenAccess_EPUB configuration file, created by oae-quickstart on
# {now}. The script detected OpenAccess_EPUB v.{version} at that time.
#
# At this point in time, all possible values for configuration are represented
# in this file. Suggested defaults exist for all values, but each may receive
# alternatives from the user. To reconfigure or reset to defaults, simply run
# oae-quickstart again.
#
# Please note that some of the configurations in this file may be overridden by
# flags passed manually to the oaepub script.

import os.path
import sys
import logging

# oaepub needs to be able to reliably find this config file; it will always be
# located in the directory returned by openaccess_epub.utils.cache_location().
# This directory is:  (path string)

cache_location = '{cache-location}'

# -- General Caching Configuration --------------------------------------------

# Image caching is helpful mostly for developers without local access to images
# which go into ePubs, this allows one to avoid re-downloading images during
# testing. Use image caching? (boolean)

image_caching = {image-caching}

# Where should the image cache be located? Use an absolute path. (path string)

image_cache = '{image-cache}'

# Log caching is helpful mostly for reporting errors that may be found some
# time after content creation and the original log may be missing. This option
# may be uncommon, and it defaults to False (boolean).

log_caching = {log-caching}

# Where should the log cache be located? Use an absolute path. (path string)

log_cache = '{log-cache}'

# Unless OpenAccess_EPUB is able to locate a local CSS file for inclusion in
# the ePub output, it will attempt to 
'''

class ValidationError(Exception):
    """Raised error for invalid user input"""

def nonempty(x):
    if not x:
        raise ValidationError('Please enter some text.')
    return x

def user_prompt(config_dict, key, text, default=None, validator=nonempty):
    while True:
        if default:
            prompt = '> {0} [{1}]: '.format(text, default)
        else:
            prompt = '> {0}: '.format(text)
        user_inp = input(prompt)
        if default and not user_inp:
            user_inp = default
        try:
            validator(user_inp)
        except ValidationError as error:
            print('* ' + str(error))
            continue
        break
    config_dict[key] = user_inp

def inner_main(args):
    """
    The inner control loops for user interaction during quickstart
    configuration.
    """

    config_dict = {}

    print('\nWelcome to the quickstart configuration for OpenAccess_EPUB')
    print('''
Please enter values for the following settings. To accept the default value
for the settings, shown in brackets, just push Enter.
''')

    print('''\
-------------------------------------------------------------------------------\
''')

    print('''
OpenAccess_EPUB defines a default cache location for the storage of various
data (and the global config.py file), this location is:\n\n{0}
'''.format(CACHE_LOCATION))

    print('''
The config utility will now ask for your input on caching related settings.
This includes: image caching (figures/tables/equations), log caching (runtime
logs), XML caching (xml files from articles), and output caching (ePub output
generated by OpenAccess_EPUB.
''')

    print('''Where should OpenAccess_EPUB place the cached images?''')
    user_prompt(config_dict, 'image-cache', 'Image cache location',
                default=os.path.join(CACHE_LOCATION, 'img_cache'),
                validator=nonempty)

def main(argv=sys.argv):
    try:
        return inner_main(argv)
    except (KeyboardInterrupt, EOFError):
        print('\n[Interrupted.]')
        return
